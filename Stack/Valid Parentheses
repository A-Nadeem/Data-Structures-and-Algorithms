bool opening(char ch) {
    if ( ch == '[' || ch == '{' || ch == '(' ) return true ; 
    else return false ; 
}
bool closing(char ch) {
    if ( ch == '}' || ch == ']' || ch == ')') return true ; 
    else return false ; 
}
bool check ( char x, char ch) {
    if (  (x == '(' && ch == ')' )  
      ||  (x == '[' && ch == ']' )  
      ||  (x == '{' && ch == '}' ) ) return true ; 
    
    else return false ; 
}


bool isValidParenthesis(string expression)
{    
    std::stack<char> s;  
   
   
for (int i = 0 ; i < expression.length() ; i ++ ) {  
  
    char ch = expression[i] ; 
    
  
    if ( opening(ch) ) {
        s.push(ch) ; 
    } 
    
    else if ( !s.empty() ) {
        char x = s.top() ; 
        if ( check(x,ch) ) {
            s.pop() ; 
          }   
        else return false ;  
    }
    else return false ; 
        
     
    }
    
    if (s.empty()) return true ;
    else return false ; 
}
