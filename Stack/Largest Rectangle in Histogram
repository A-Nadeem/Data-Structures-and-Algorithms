class Solution {
    
    private : 
    
        vector<int> left(vector<int> heights) {
            
            stack<int> s;
            int n = heights.size(); 
            vector<int> ans1(n) ; 
            
            for(int i = 0 ;i < n ; i++ ) {
                
                int curr = heights[i] ;
                
                while(!s.empty() && heights[s.top() ] >= curr ) {
                    s.pop();
                }
                if(s.empty() ) ans1[i] = i ;
                else ans1[i] = i - s.top() - 1 ; 
                
                s.push(i) ; 
            }
            
            return ans1; 
            
        }
    
     
        vector<int> right (vector<int> heights) {
            
            stack<int> s;
            int n = heights.size(); 
            vector<int> ans2(n) ; 
            
            for(int i = n-1 ;i >=0 ; i-- ) {
                
                int curr = heights[i] ;
                
                while(!s.empty() && heights[s.top() ] >= curr ) {
                    s.pop();
                }
                if(s.empty() ) ans2[i] = n-i -1 ;
                else ans2[i] = s.top() - i - 1 ; 
                
                s.push(i) ; 
            }
            
            return ans2; 
            
        }   
    
    
    
public:
    int largestRectangleArea(vector<int>& heights) {
       
        vector<int> leftin = left(heights) ;
        
        vector<int> rightin = right(heights) ; 
        
        
        int area = INT_MIN; 
        
        for( int i = 0 ; i < heights.size(); i++) {
            int new_area ; 
            int h = heights[i] ; 
            
            new_area = h + h*leftin[i] + h*rightin[i] ; 
            
            area = max(area,new_area) ; 
            
        }
        
        return area ; 
    }
};
