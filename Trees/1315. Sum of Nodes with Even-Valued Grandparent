/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int s = 0 ; 

    void sum ( TreeNode* n, int level ) {
        if (!n ) return ; 

        if (level == 2 ) {
             s += n->val ; 
             return ; 

        }

        sum (n->left , level +1 ) ; 
        sum ( n->right, level +1 ) ;
    }

    void helper(TreeNode* root) {
        if (!root ) return ; 

        if ( root->val%2 == 0 ) sum( root, 0 ) ;

        helper(root->left) ;
        helper(root->right) ; 

    }


    int sumEvenGrandparent(TreeNode* root) {
        helper (root)  ;
         
        return s ; 
    }
};
****************************************************************************************************************************************************************************

/*class Solution {
public:
    int s=0;
    int sumEvenGrandparent(TreeNode* root) {
        fun(root,NULL,NULL);  //passing the root node with it's parent & grandparent as NULL
        return s;
    }
    void fun(TreeNode* root,TreeNode* parent,TreeNode* grandparent)
    {
        if(!root) return;  //if root is null then return 
        if(grandparent && grandparent->val%2==0)  //checking even valued grandparent existance 
            s+=root->val;
        fun(root->left,root,parent);  //calling function for left subtree where root will be the parent & previous parent will act as the grandparent for left subtree of the root.
        fun(root->right,root,parent);  //same for right subtree
    }
};*/
