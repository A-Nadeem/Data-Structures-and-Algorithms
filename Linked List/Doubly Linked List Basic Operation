#include <iostream>
using namespace std;


class Node {
    public :
    int data ; 
    
    Node* next ;
    Node* prev ; 
    
    Node(int data) {
        this->data = data ; 
        this->next = NULL ;
        this->prev = NULL ; 
       // cout<< "contructor envoked" ; 
    }
    
    // DESTRUCTOR 
    
    ~Node() {
    cout<< "Memory Freed at " << this->data<< endl  ; 
    }
} ; 


void print (Node* &head ) {
    Node* temp = head ; 
    while (temp != NULL ) {
        cout << temp->data<<" " ; 
        temp = temp->next ; 
    }
    cout<<endl ; 
}

int getlength(Node* &head) {
    Node* temp = head ; 
    int count = 0 ;     
    while (temp != NULL ) {
        count++ ; 
        temp = temp->next ; 
    }
    return count ; 
}

void inserAtHead(Node* &head, int data) {    
  
  
    
          // what if LL is empty ... extra CASE 
    
    
    
    
    
    // creation of Node 
    Node* n = new Node(data) ; 

    //if empty linked list 
    /*if (head = NULL ) {
        head = n ; 

    } */

    n->next = head ; 
    head->prev = n ;
    
    head = n ; 
    
}

void insertAtTail (Node* &tail, int data) {
    
    
      
        // what if LL is empty .... extra CASE

    
    
    
    //creation of Node 
    Node* n  = new Node(data) ; 
    
    // if empty linked list 
    /*if(tail == NULL) {
        tail = n ;
        
    } */

    n->prev = tail ; 
    tail->next = n ; 
    
    tail = n ; 

}

void insertAtPos( Node* &head , int pos, int data) {
    // create
    Node* node = new Node(data) ;
    
    Node* temp = head ;
    
    if (pos ==1 ) {
        node-> next = head ;
        head-> prev = node ; 
        head = node ; 
        return ; 
    }
    
    for (int i = 1; i < pos-1 ; i++) {
        temp = temp->next ;
    }
    // temp at one prev 
    
    node->next = temp->next ; 
    node->prev = temp ;
  
 
   if (temp->next != NULL) { 
    (temp->next)->prev = node ; 
   }
    temp->next = node ; 
    
}


void delBypos(Node* &head, int pos ) {
    
    Node* temp = head ; 
    
    if (pos == 1 ) {
        head = temp->next ;
        head->prev = NULL ; 
        temp->next = NULL ;
        delete temp ;
        return ; 
    }
    
    for(int i =1 ; i < pos-1; i++ ) {
        temp = temp->next ; 
    }
    Node* curr = temp->next ; 
    
    if (curr->next == NULL) {
        temp->next = NULL ;
        curr->prev = NULL ; 
        delete curr ;
        return ; 
    }
    
    temp -> next = curr->next ;
    (curr->next)->prev = temp ; 
    curr->next = NULL ; 
    curr->prev = NULL ;
    
    delete curr ; 
}



int main()
{
    Node* node1 = new Node(1) ;
    
    Node *head = node1 ; 
    Node *tail = node1 ; 
     
    
    inserAtHead(head,2) ;
    inserAtHead(head,3) ; 
   
   insertAtTail(tail,5) ;
   insertAtTail(tail,6) ; 
   
    // print (head) ; 
   
   insertAtPos(head,3,33 ) ; 
   insertAtPos(head,7,77) ; 
   insertAtPos(head,1,11) ; 
   insertAtPos(head,1,0 ) ; 
   
    print (head) ; 
    
    delBypos(head, 9 ) ;
    
    print(head) ; 
    
  
  // int l =  getlength(head) ; 
  // cout << endl<<l ; 
    return 0;
}
